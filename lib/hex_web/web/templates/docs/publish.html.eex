<h2>Publishing a package</h2>

<p>
  Publishing a package to Hex consists of registering a Hex user, adding metadata and dependencies to the project's <code>mix.exs</code> file, and finally submitting the package with a <code>mix</code> task.
</p>

<h3>Registering a Hex user</h3>

<p>
  When registering a user, you will be prompted for a username, your email and a password. The email is used to confirm your identity during signup, as well as to contact you in case there is an issue with one of your packages. The email will never be shared with a third party.
</p>

<pre><code>$ mix hex.user register
Username: johndoe
Email: john.doe@example.com
Password:
Password (confirm):
Registering...
Generating API key...
You are required to confirm your email to access your account, a confirmation email has been sent to john.doe@example.com
</code></pre>

<p>
  Once this step has been completed, check your email inbox for the confirmation email. Once you have followed the enclosed link, your account will be ready to use.
</p>

<h3>Adding metadata and dependencies to <code>mix.exs</code></h3>

<p>
  The package is configured in the <code>project</code> function in the project's <code>mix.exs</code> file. <a href="#example-mix-exs-file">See below</a> for an example file.
</p>

<h4>Metadata</h4>

<p>
  First, make sure that the <code>:version</code> property is correct. All Hex packages are required to follow <a href="http://semver.org/">semantic versioning</a>. <code>:version</code> and <code>:app</code> (the package name) are the only required properties.
</p>

<p>
  Then fill in the <code>:description</code> property. It should be a sentence, or a few sentences, describing the package. The <code>:description</code> is optional but highly recommended.
</p>

<p>
  Under the <code>:package</code> property are some additional configuration options:
</p>

<dl class="dl-horizontal">
  <dt><code>:files</code></dt>
  <dd>A list of files and directories to include in the package. Defaults to standard project directories. Has to include <code>mix.exs</code>.</dd>
  <dt><code>:contributors</code></dt>
  <dd>A list of names of contributors to the project.</dd>
  <dt><code>:licenses</code></dt>
  <dd>A list of licences the project is licensed under.</dd>
  <dt><code>:links</code></dt>
  <dd>A map where the key is a link name and the value is the link URL.</dd>
  <dt><code>:build_tools</code></dt>
  <dd>List of build tools that can build the package. Hex will try to automatically detect the build tools, it will do this based on the files in the package. If a "rebar" or "rebar.config" file is present Hex will mark it as able to build with rebar. This detection can be overridden by setting this field.</dd>
</dl>

<p>
  These <code>:package</code> properties are also optional but highly recommended.
</p>

<h4>Dependencies</h4>

<p>
  A dependency defined with no SCM (<code>:git</code> or <code>:path</code>) will be automatically treated as a Hex dependency. See the <a href="/docs/usage">Usage guide</a> for more details.
</p>

<p>
  Only Hex packages will be included as dependencies of the package, for example Git dependencies will not be included. Additionally, only production dependencies will be included, just like how Mix will only fetch production dependencies when fetching the dependencies of your dependencies. Dependencies will be treated as production dependencies when they are defined with no <code>:only</code> property or with <code>only: :prod</code>.
</p>

<a name="example-mix-exs-file"></a>
<h4>Example mix.exs file</h4>

<pre><code>defmodule Postgrex.Mixfile do
  use Mix.Project

  def project do
    [app: :postgrex,
     version: "0.1.0",
     elixir: "0.13.0",
     description: description,
     package: package,
     deps: deps]
  end

  def application do
    []
  end

  defp deps do
    [{:decimal, "~> 0.2.0",
      :ex_doc, github: "elixir-lang/ex_doc"}]
  end

  defp description do
    """
    A few sentences (a paragraph) describing the project.
    """
  end

  defp package do
    [# These are the default files included in the package
     files: ["lib", "priv", "mix.exs", "README*", "readme*", "LICENSE*", "license*"],
     contributors: ["Eric Meadows-Jönsson", "José Valim"],
     licenses: ["Apache 2.0"],
     links: %{"GitHub" => "https://github.com/ericmj/postgrex",
              "Docs" => "http://ericmj.github.io/postgrex/"}]
  end
end
</code></pre>

<h3>Submitting the package</h3>

<p>
  After the package metadata and dependencies have been added to <code>mix.exs</code>, we are ready to publish the package with the <code>mix hex.publish</code> command:
</p>

<pre><code>$ mix hex.publish
Publishing postgrex v0.4.0
  Dependencies:
    decimal ~> 0.1.0
  Excluded dependencies (not part of the Hex package):
    ex_doc
  Included files:
    lib/postgrex
    lib/postgrex/binary_utils.ex
    lib/postgrex/connection.ex
    lib/postgrex/protocol.ex
    lib/postgrex/records.ex
    lib/postgrex/types.ex
    mix.exs
Proceed? [Yn] Y
Published postgrex v0.4.0
</code></pre>

<p>
  Congratulations, you've published your package! It will appear on the <a href="https://hex.pm/">https://hex.pm</a> site and will be available to add as a dependency in other Mix projects.
</p>

<p>
  Please test your package after publishing by adding it as dependency to a Mix project and fetching and compiling it. If there are any issues, you can publish the package again for up to one hour after first publication. A publication can also be reverted with <code>mix hex.publish --revert VERSION</code>.
</p>

<p>
  When running the command to publish a package, Hex will create a tar file of all the files and directories listed in the <code>:files</code> property. When the tarball has been pushed to the Hex servers, it will be uploaded to a CDN for fast and reliable access for users. Hex will also recompile the registry file that all clients will update automatically when fetching dependencies.
</p>

<h3>Publishing Erlang packages</h3>

<p>
    Erlang packages can be published through the <a href="http://rebar3.org">rebar3</a> Hex plugin. It is suggested to place the entry in the global rebar3 config which should be made as <code>~/.config/rebar3/rebar.config</code>.</p>

<h4>Example rebar.config file</h4>
    <pre><code>
{plugins, [rebar3_hex]}.
    </code></pre>

<p>
Package metadata goes in your application's <code>.app.src</code> file.
</p>

<h4>Example .app.src file</h4>

<pre><code>
{application, relx,
             [{description, "Release assembler for Erlang/OTP Releases"},
              {vsn, "2.1.1"},
              {modules, []},
              {registered, []},
              {applications, [kernel, stdlib, getopt ,erlware_commons, bbmustache,
                              providers]},
              {contributors, ["Eric Merritt","Tristan Sloughter",
                              "Jordan Wilberding"]},
              {licenses, ["Apache"]},
              {links, [{"Github", "https://github.com/erlware/relx"}]}]}.
</code></pre>

<pre><code>
$ rebar3 hex publish
Publishing relx 2.1.1
  Dependencies:
    bbmustache 1.0.1
    providers 1.4.1
    erlware_commons 0.13.0
    getopt 0.8.2
  Excluded dependencies (not part of the Hex package):

  Included files:
    src/relx.app.src
    src/relx.erl
    src/rlx_app_discovery.erl
    src/rlx_app_info.erl
    src/rlx_cmd_args.erl
    src/rlx_config.erl
    src/rlx_depsolver.erl
    src/rlx_depsolver_culprit.erl
    src/rlx_dscv_util.erl
    src/rlx_goal.erl
    src/rlx_goal.peg
    src/rlx_goal_utils.erl
    src/rlx_prv_app_discover.erl
    src/rlx_prv_archive.erl
    src/rlx_prv_assembler.erl
    src/rlx_prv_overlay.erl
    src/rlx_prv_rel_discover.erl
    src/rlx_prv_release.erl
    src/rlx_prv_relup.erl
    src/rlx_rel_discovery.erl
    src/rlx_release.erl
    src/rlx_state.erl
    src/rlx_topo.erl
    src/rlx_util.erl
    include/relx.hrl
    priv/templates/bin
    priv/templates/bin_windows
    priv/templates/erl_ini
    priv/templates/erl_script
    priv/templates/extended_bin
    priv/templates/extended_bin_windows
    priv/templates/install_upgrade_escript
    priv/templates/nodetool
    priv/templates/sys_config
    priv/templates/vm_args
    rebar.config
    rebar.lock
    README.md
    LICENSE.md
Proceed? ("Y")> Y
===> Published relx 2.1.1
</code></pre>

The <a href="http://www.rebar3.org/v3.0/docs/hex-package-management">rebar3 hex plugin's documentation</a> contains more information about the hex plugin itself and publishing packages.
