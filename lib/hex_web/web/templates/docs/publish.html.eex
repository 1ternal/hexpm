<h2>Publishing a package</h2>

<p>
  Publishing a package to Hex consists of creating a user, attaching some metadata to the project's <code>mix.exs</code> file and finally performing the command to push.
</p>

<h3>Register a new user</h3>

<p>
  When registering a user, a username, password, and email will be asked for. The email is used to confirm your identity during signup, as well as to contact you in case there is an issue with one of your packages. The email will never be shared to a third party.
</p>

<pre><code>$ mix hex.user register
Username: johndoe
Email: john.doe@example.com
Password:
Password (confirm):
Registering...
Generating API key...
You are required to confirm your email to access your account, a confirmation email has been sent to john.doe@example.com
</code></pre>

<p>
  Once this step has been completed, check your email inbox for the confirmation email. Once you have followed the enclosed link, your account will be ready to use.
</p>

<h3>Adding metadata</h3>

<p>
  The package is configured in Mix's project configuration. First make sure that <code>:version</code> property is correct for the new package version. All Hex packages are required to follow <a href="http://semver.org/">semantic versioning</a>.
</p>

<p>
  Secondly, fill in the <code>:description</code> property. It should be a few sentences describing the package.
</p>

<p>
  Under the <code>:package</code> property are four additional configuration options.
</p>

<dl class="dl-horizontal">
  <dt><code>:files</code></dt>
  <dd>A list of files and directories to include in the package. Defaults to standard project directories. Has to include <code>mix.exs</code>.</dd>
  <dt><code>:contributors</code></dt>
  <dd>A list of names of contributors to the project.</dd>
  <dt><code>:licenses</code></dt>
  <dd>A list of licences the project is licensed with.</dd>
  <dt><code>:links</code></dt>
  <dd>A map where the key is a link name and the value is the link URL.</dd>
</dl>

<p>
  Only the <code>:version</code> property is required to publish a package. But all other properties are highly recommended to fill in.
</p>

<h3>Dependencies</h3>

<p>
  A dependency defined with no SCM (<code>:git</code> or <code>:path</code>) will be automatically treated as a Hex dependency. See the <a href="/docs/usage">Usage guide</a> for more details.
</p>

<p>
  Only Hex packages will be included as dependencies of the package, for example Git dependencies will not be included. Additionally, only production dependencies will be included, just like how Mix will only fetch production dependencies when fetching the dependencies of your dependencies. Dependencies will be treated as production dependencies when they are defined with no <code>:only</code> property or with <code>only: :prod</code>.
</p>

<h3>Publishing Elixir packages</h3>

<p>
  After the package metadata and dependencies have been added to the mixfile we are ready to publish the package. See below for an example of a mixfile.
</p>

<p>
  When running the command to publish a package Hex will create a tar file of all the files and directories listed in the <code>:files</code> property. When the tarball has been pushed to the Hex servers, it will be uploaded to a CDN for fast and reliable access for users. Hex will also recompile the registry file that all clients will update automatically when fetching dependencies.
</p>

<pre><code>$ mix hex.publish
Publishing postgrex v0.4.0
  Dependencies:
    decimal ~> 0.1.0
  Excluded dependencies (not part of the Hex package):
    ex_doc
  Included files:
    lib/postgrex
    lib/postgrex/binary_utils.ex
    lib/postgrex/connection.ex
    lib/postgrex/protocol.ex
    lib/postgrex/records.ex
    lib/postgrex/types.ex
    mix.exs
Proceed? [Yn] Y
Published postgrex v0.4.0
</code></pre>

<p>
  Please test your package after publishing by adding it as dependency to a Mix project and fetching and compiling it. If there are any issues you can publish the package again for up to one hour after the first publication. A publication can also be reverted with <code>mix hex.publish --revert VERSION</code>.
</p>

<h4>Example mix.exs file</h4>

<pre><code>defmodule Postgrex.Mixfile do
  use Mix.Project

  def project do
    [app: :postgrex,
     version: "0.1.0",
     elixir: "0.13.0",
     description: description,
     package: package,
     deps: deps]
  end

  def application do
    []
  end

  defp deps do
    [{:decimal, "~> 0.2.0",
      :ex_doc, github: "elixir-lang/ex_doc"}]
  end

  defp description do
    """
    A few sentences (a paragraph) describing the project.
    """
  end

  defp package do
    [# These are the default files included in the package
     files: ["lib", "priv", "mix.exs", "README*", "readme*", "LICENSE*", "license*"],
     contributors: ["Eric Meadows-Jönsson", "José Valim"],
     licenses: ["Apache 2.0"],
     links: %{"GitHub" => "https://github.com/ericmj/postgrex",
              "Docs" => "http://ericmj.github.io/postgrex/"}]
  end
end
</code></pre>

<h3>Publishing Erlang packages</h3>

<p>
  Erlang packages can also be published to Hex. A file describing the package is required, but unlike for Elixir projects it should not be named <code>mix.exs</code>, because Mix will treat packages with a <code>mix.exs</code> file as a Mix project. Convention is to name it <code>package.exs</code>. The package can be published with the command: <code>MIX_EXS=package.exs mix hex.publish</code>. See below for an example of a <code>package.exs</code> file for Erlang projects.
</p>

<h4>Example package.exs file</h4>

<pre><code>defmodule Poolboy.Mixfile do
  use Mix.Project

  def project do
    [app: :poolboy,
     version: "1.2.1",
     description: description,
     package: package,
     deps: deps]
  end

  defp deps do
    [{:plug, "~> 0.2.0"}]
  end

  defp description do
    """
    A few sentences (a paragraph) describing the project.
    """
  end

  defp package do
    [files: ~w(src rebar.config README.md LICENSE UNLICENSE VERSION),
     contributors: ["Devin Torres", "Andrew Thompson", "Kurt Williams"],
     licenses: ["Unlicense", "Apache 2.0"],
     links: %{"GitHub" => "https://github.com/devinus/poolboy"}]
   end
end
</code></pre>
