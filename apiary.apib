FORMAT: 1A

# Hex

The Hex API is based on REST, it is currently in beta and so can change at any time. This API is a specification with examples from the implementation at https://hex.pm/api. Parts of the specification are optional to implement and will be marked as such.

### Related specifications

The HTTP API is only one of the specifications that makes the package manager Hex. Keep in mind that the HTTP API is not required to be implemented for clients to be able to consume the repository. Repositories that doesn't allow public users to publish packages can have any mechanism for publishing to their repository. Although for publicly visible repositories it is recommended to implement the endpoints for browsing packages (/packages/*).

Below is a list of related specifications:

  * [Endpoints](https://github.com/hexpm/hex_web/blob/master/specifications/endpoints.md)
  * [Tarball format](https://github.com/hexpm/hex_web/blob/master/specifications/package_tarball.md)
  * [Registry format](https://github.com/hexpm/hex_web/blob/master/specifications/registry.md)
  * [Package metadata](https://github.com/hexpm/hex_web/blob/master/specifications/package_metadata.md)
  * [Semantic Versioning](http://semver.org/)

### Media types

Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the Accept header when you make a request.

The API supports three media types; JSON, Elixir and Erlang. Hex media types look like this:

    application/vnd.hex[.version][+format]

The only accepted version is `beta`. The following are the accepted media types:

  * application/json
  * application/vnd.hex+json
  * application/vnd.hex+elixir
  * application/vnd.hex+erlang

The elixir media type is a safe subset of elixir terms serialized with [`Kernel.inspect/1`](http://elixir-lang.org/docs/stable/elixir/Kernel.html#inspect/2). The only allowed terms are maps, lists, tuples, numbers, binaries and booleans. Atoms are strictly not allowed.

The erlang media type is a safe subset of erlang terms serialized with [`erlang:term_to_binary/1`](http://www.erlang.org/doc/man/erlang.html#term_to_binary-1). The only allowed terms are maps, lists, tuples, numbers, binaries and booleans. Atoms are strictly not allowed.

### Rate limiting

The rate limiting allows you to make 100 requests per minute. The limits are likely to change in the future and authenticated requests will be able to make more requests. Additionally, in the future, conditional requests that return `304 Not Modified` will not count against the limits.

The returned HTTP headers will tell you about your current rate limit status:

Header                  | Description
:---------------------- | :----------
`x-ratelimit-limit`     | The maximum number of requests that the consumer is permitted to make per hour.
`x-ratelimit-remaining` | The remaining number of requests the consumer is allowed to make until reset.
`x-ratelimit-reset`     | The time at which the rate limit window reset in UNIX epoch.

### Pagination

Requests on collection resources return paginated results. Requests that return multiple results may return up to 100 items. You can specify further pages with the `?page` parameter.

    $ curl https://hex.pm/api/packages?page=2

Page numbering start from 1 and will by default return the first page.

### Conditional requests

Most responses return an `ETag` header. Many responses will also return a `Last-Modified` header, the notable exception being responses on collection resources. You can use the values provided in these headers to send conditional requests with `If-None-Match` or `If Modified Since`, if the resource has not changed a  `304 Not Modified` response will be returned.

Also note that in the future `304` responses will not count against your rate limit counter.

### Authentication

There are two way ways to authenticate requests in the Hex API; Basic Authentication with a username and password or with an API token. Failed authentication attempts will return `403 Forbidden` except for some resources that return `404 Not Found` to prevent leaking sensitive data.

##### Basic Authentication

    $ curl -u "username" https://hex.pm/api

Basic authentication is only allowed on some resources, specifically ones used to generate API tokens, this because the basic authentication is computationally expensive and less secure than using API tokens.

##### API Token

    $ curl -H "Authorization: token" https://hex.pm/api

### Client errors

  1. Sending invalid JSON, Elixir or Erlang will result in `400 Bad Request`.

        HTTP/1.1 400 Bad Request
    
        {
          "status": 400,
          "message": "malformed request, got Poison.SyntaxError with message Unexpected token: +"
        }

  2. Failed authentication attempts will result in `401 Unauthorized`.

        HTTP/1.1 401 Unauthorized

        {
          "status": 401,
          "message": "failed to authorize"
        }

  3. Making a request to a missing resource will result in `404 Not Found`.

        HTTP/1.1 404 Not Found

        {
          "status": 404,
          "message": "not found"
        }

  4. Validation errors or invalid parameters will return `422 Unprocessable Entity`.

        HTTP/1.1 422 Unprocessable Entity

        {
          "status": 422,
          "message": "validation failed",
          "errors": {
            "email": "has invalid format"
          }
        }

# Group Users

Authenticated requests require a User account. A User is required to publish packages but not to consume packages from the package manager.

## Users collection [/users]

### Create a User [POST]

A successful user creation will send a confirmation email to the given email address. In the email will be link to follow that will confirm the email and activate the account. The account will not be usable until activated.

A user can be recreated for the given `username` and `email` if it has not been activated yet.

+ Request (application/json)

    The following parameters are available:
    
    + `username` Username of the user. Only allows any alphanumeric and the following characters: `_-.`
    + `password` User's password. Should be a printable UTF-8 string.
    + `email` User's email address. Should be a valid email address.

    + Header

            Accept: application/json

    + Body

            {
              "username": "ericmj",
              "password": "hunter42",
              "email": "ericmj@mail.com"
            }

+ Response 201 (application/json)

    + Header

            Location: https://hex.pm/api/users/ericmj

    + Body

            {
              "username": "ericmj",
              "email": "ericmj@mail.com"
              "inserted_at": "2015-04-05T01:21:49Z",
              "updated_at": "2015-04-05T01:21:49Z",
              "url": "https://hex.pm/api/users/ericmj"
            }

## User [/user/{username_or_email}]

+ Parameters
    + username_or_email: ericmj (string)
        Can be either a username or the email address associated with a User

### Fetch a User [GET]

+ Request (application/json)

    This request requires authentication.

    + Header

            Accept: application/json
            Authorization: e2bfe5e65b9235acebe06df8027905c0

+ Response 200 (application/json)

    + Body

            {
              "username": "ericmj",
              "email": "ericmj@mail.com"
              "inserted_at": "2015-04-05T01:21:49Z",
              "updated_at": "2015-04-05T01:21:49Z",
              "url": "https://hex.pm/api/users/ericmj"
            }

## User reset [/user/{username_or_email}/reset]

+ Parameters
    + username_or_email: ericmj (string)
        Can be either a username or the email address associated with a User

### Reset User password [POST]

Will start the process to reset a User's password. A confirmation email will be sent to the email address associated with the account. In the email will be link to follow that will show a form where a new password can be provided.

+ Request (application/json)

    This request requires authentication.

    + Header

            Accept: application/json
            Authorization: e2bfe5e65b9235acebe06df8027905c0

+ Response 204 (application/json)

# Group Packages

Packages are essential a (unique) name with some associated metadata. Packages are only interesting as a way to group and structure package releases which will be covered later.

## Packages Collection [/packages{?sort}]

### List all Packages [GET]

+ Parameters
    + sort: downloads (enum[string], optional)
        Sorting field
        + Default: name
        + Members
            + name - Package name, descending
            + downloads - Number of package downloads, ascending
            + inserted_at - Package insertion time, ascending
            + updated_at - Package last update time, descending

+ Request

    + Header

            Accept: application/json

+ Response 200 (application/json)

    + Body

            [{
              "name": "plug",
              "url": "https://hex.pm/api/packages/plug",
              "meta": {
                "links": {"GitHub": "https://github.com/elixir-lang/plug"},
                "licenses": ["Apache 2"],
                "description": "A specification and conveniences for composable modules in between web applications"
              },
              "downloads": {
                "all": 43,
                "week": 14,
                "day": 2
              },
              "inserted_at": "2015-03-24T20:31:35Z",
              "updated_at": "2015-04-02T04:55:41Z"
            }]

## Package [/packages/{name}]

+ Parameters
    + name: plug (string)
        The package name.

### Fetch a Package [GET]

+ Request

    + Header

            Accept: application/json

+ Response 200 (application/json)

    + Body

            {
              "name": "plug",
              "url": "https://hex.pm/api/packages/plug",
              "meta": {
                "links": {"GitHub": "https://github.com/elixir-lang/plug"},
                "licenses": ["Apache 2"],
                "description": "A specification and conveniences for composable modules in between web applications"
              },
              "downloads": {
                "all": 43,
                "week": 14,
                "day": 2
              },
              "releases": [{
                "version": "0.4.1",
                "url": "https://hex.pm/api/packages/plug/releases/0.4.1",
                "inserted_at": "2014-04-23T18:58:54Z",
                "updated_at": "2015-04-26T15:26:23Z"
              }],
              "inserted_at": "2015-03-24T20:31:35Z",
              "updated_at": "2015-04-02T04:55:41Z"
            }

## Group Package Release

A release has a (unique) version and belongs to a package. Associated with the release are it's content; the source code and related files required to build and use it as a library.

After a release has been published there is a one hour window where it can be modified (republished) or reverted. After the hour it is immutable and cannot be altered by users, note that the administrators reserve the right to remove or modify releases in any way, either because it breaks the Code of Conduct or because any of the specifications changed.

## Release [/packages/{name}/releases/{version}]

+ Parameters
    + name: plug (string)
        Package name
    + version: 0.4.1 (string)
        Release version, should be a Semantic Version

### Publish a Release [POST]

Will also create a new package or update an existing one. See the package tarball specification for details about the request contents.

+ Request

    This request requires authentication.

    The body should be a package tarball following the specification linked in the introduction.

    + Header

            Accept: application/json
            Authorization: e2bfe5e65b9235acebe06df8027905c0

+ Response 200 (application/json)

    + Body

            {
              "package_name": "plug",
              "version": "0.4.1",
              "has_docs": false,
              "url": "https://hex.pm/api/packages/plug/releases/0.4.1",
              "package_url": "https://hex.pm/api/packages/plug",
              "meta": {
                "build_tools": ["mix"]
              },
              "dependencies": {
                "cowboy": {
                  "requirement": "~> 1.0",
                  "optional": true,
                  "app": "cowboy"
                }
              }
              "downloads": 16,
              "inserted_at": "2014-04-23T18:58:54Z",
              "updated_at": "2014-04-23T18:58:54Z"
            }

### Fetch a Release [GET]

+ Request

    + Header

            Accept: application/json

+ Response 200 (application/json)

    + Body

            {
              "package_name": "plug",
              "version": "0.4.1",
              "has_docs": true,
              "url": "https://hex.pm/api/packages/plug/releases/0.4.1",
              "package_url": "https://hex.pm/api/packages/plug",
              "meta": {
                "build_tools": ["mix"]
              },
              "dependencies": {
                "cowboy": {
                  "requirement": "~> 1.0",
                  "optional": true,
                  "app": "cowboy"
                }
              }
              "downloads": 16,
              "inserted_at": "2014-04-23T18:58:54Z",
              "updated_at": "2015-04-26T15:26:23Z"
            }

## Group Package Documentation

Package Documentation is attached to a release. The documentation consists of HTML and related files to be served by a browser. Unlike releases documentation can be changed at any time by package owners.

Package Documentation is optional to implement.

## Package Documentation [/packages/{name}/releases/{version}/docs]

+ Parameters
    + name: plug (string)
        Package name
    + version: 0.4.1 (string)
        Release version, should be a Semantic Version

### Find Package Documentation [GET]

+ Response 302

    + Header

            Location: https://s3.amazonaws.com/s3.hex.pm/plug-0.4.1.tar.gz

### Publish Package Documentation [POST]

NOTE: Below are implementation details of hex.pm.

The uploaded tarball will be served under https://s3.amazonaws.com/s3.hex.pm/docs/{package}-{version}.tar.gz.

The tarball contents will be served at http://hexdocs.pm/{package}/{version}. The latest upload will be served at http://hexdocs.pm/{package}.

+ Request
    
    This request requires authentication.

    The body should be a gzipped tarball containing files that should be served as documentation for the project. It should contain an `index.html` that will be served as the root.

    + Header

            Authorization: e2bfe5e65b9235acebe06df8027905c0

+ Response 201

    + Header

            Location: https://hex.pm/api/packages/plug/releases/0.4.1/docs

### Remove Package Documentation [DELETE]

+ Response 204

# Group Package Owners

Package owners are Users that can publish packages. Any owner can add or remove other package owners so be careful with whom you add.

## Package Owners Collection [/packages/{name}/owners]

+ Parameters
    + name: plug (string)
        Package name

### Fetch Package Owners [GET]

+ Request
    
    This request requires authentication.

    + Header

            Accept: application/json
            Authorization: e2bfe5e65b9235acebe06df8027905c0

+ Response 200 (application/json)

    + Body

            [{
              "username": "ericmj",
              "url": "https://hex.pm/api/users/ericmj",
              "inserted_at": "2014-04-21T17:20:12Z",
              "updated_at": "2014-04-21T17:20:12Z",
              "email": "ericmg@mail.com"
            }]

## Package Owner [/packages/{name}/owners/{email}]

+ Parameters
    + name: plug (string)
        Package name
    + email: ericmj@mail.com (string)
        User account email, should be a valid email address belonging to an existing user

### Add a Package Owner [PUT]

+ Response 204

### Remove a Package Owner [DELETE]

+ Response 204
    
# Group API Keys

API Keys are used to authenticate requests (see Authentication section for more details). A key has a name used to identify it and a secret that is used for the actual authentication.

## API Keys Collection [/keys]

### List all API Keys [GET]

+ Request
    
    This request requires authentication.

    + Header

            Accept: application/json
            Authorization: e2bfe5e65b9235acebe06df8027905c0

+ Response 200 (application/json)
    + Body

            [{
              "name": "my_computer",
              "inserted_at": "2014-04-21T17:20:12Z",
              "updated_at": "2014-04-21T17:20:12Z"
            }]

### Create an API Key [POST]

+ Request

    This request requires basic authentication and is allowed to be made even if the account email has not yet been confirmed.

    + Header

            Accept: application/json
            Authorization: Basic ZXJpY21qOmh1bnRlcjQy

+ Response 201 (application/json)

    The `secret` will only be sent, it should be stored after creating the API key. Subsequent GET requests will not include the `secret`.

    + Header

            Location: https://hex.pm/api/keys/my_computer

    + Body

            [{
              "name": "my_computer",
              "secret": "e2bfe5e65b9235acebe06df8027905c0",
              "inserted_at": "2014-04-21T17:20:12Z",
              "updated_at": "2014-04-21T17:20:12Z"
            }]

## API Key [/keys/{name}]

+ Parameters
    + name: my_computer (string)
        Key name

### Fetch an API Key [GET]

+ Request
    
    This request requires authentication.

    + Header

            Accept: application/json
            Authorization: e2bfe5e65b9235acebe06df8027905c0

+ Response 200 (application/json)
    + Body

            {
              "name": "my_computer",
              "inserted_at": "2014-04-21T17:20:12Z",
              "updated_at": "2014-04-21T17:20:12Z"
            }

### Remove an API Key [DELETE]

+ Request
    
    This request requires authentication.

    + Header

            Authorization: e2bfe5e65b9235acebe06df8027905c0

+ Response 204
