FORMAT: 1A

# Hex

The Hex API is based on REST, it is currently in beta and so can change at any time.

### Related specifications

  * Endpoints - ...
  * Tarball format - ...
  * Registry format - ...

### Media types

Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the Accept header when you make a request.

The API supports three media types; JSON, Elixir and Erlang. Hex media types look like this:

    application/vnd.hex[.version][+format]

The only accepted version is `beta`. The following are the accepted media types:

  * application/json
  * application/vnd.hex+json
  * application/vnd.hex+elixir
  * application/vnd.hex+erlang

The elixir media type is a safe subset of elixir terms serialized with [`Kernel.inspect/1`](http://elixir-lang.org/docs/stable/elixir/Kernel.html#inspect/2). The only allowed terms are maps, lists, tuples, numbers, binaries and booleans. Atoms are strictly not allowed.

The erlang media type is a safe subset of erlang terms serialized with [`erlang:term_to_binary/1`](http://www.erlang.org/doc/man/erlang.html#term_to_binary-1). The only allowed terms are maps, lists, tuples, numbers, binaries and booleans. Atoms are strictly not allowed.

### Rate limiting

The rate limiting allows you to make 100 requests per minute. The limits are likely to change in the future and authenticated requests will be able to make more requests. Additionally, in the future, conditional requests that return `304 Not Modified` will not count against the limits.

The returned HTTP headers will tell you about your current rate limit status:

Header                  | Description
:---------------------- | :----------
`x-ratelimit-limit`     | The maximum number of requests that the consumer is permitted to make per hour.
`x-ratelimit-remaining` | The remaining number of requests the consumer is allowed to make until reset.
`x-ratelimit-reset`     | The time at which the rate limit window reset in UNIX epoch.

### Pagination

Requests on collection resources return paginated results. Requests that return multiple results may return up to 100 items. You can specify further pages with the `?page` parameter.

    $ curl https://hex.pm/api/packages?page=2

Page numbering start from 1 and will by default return the first page.

### Conditional requests

Most responses return an `ETag` header. Many responses will also return a `Last-Modified` header, the notable exception being responses on collection resources. You can use the values provided in these headers to send conditional requests with `If-None-Match` or `If Modified Since`, if the resource has not changed a  `304 Not Modified` response will be returned.

Also note that in the future `304` responses will not count against your rate limit counter.

### Authentication

There are two way ways to authenticate requests in the Hex API; Basic Authentication with a username and password or with an API token. Failed authentication attempts will return `403 Forbidden` except for some resources that return `404 Not Found` to prevent leaking sensitive data.

##### Basic Authentication

    $ curl -u "username" https://hex.pm/api

Basic authentication is only allowed on some resources, specifically ones used to generate API tokens, this because the basic authentication is computationally expensive and less secure than using API tokens.

##### API Token

    $ curl -H "Authorization: token" https://hex.pm/api

### Client errors

  1. Sending invalid JSON, Elixir or Erlang will result in `400 Bad Request`.

        HTTP/1.1 400 Bad Request
    
        {
          "status": 400,
          "message": "malformed request, got Poison.SyntaxError with message Unexpected token: +"
        }

  2. Failed authentication attempts will result in `401 Unauthorized`.

        HTTP/1.1 401 Unauthorized

        {
          "status": 401,
          "message": "failed to authorize"
        }

  3. Making a request to a missing resource will result in `404 Not Found`.

        HTTP/1.1 404 Not Found

        {
          "status": 404,
          "message": "not found"
        }

  4. Validation errors or invalid parameters will return `422 Unprocessable Entity`.

        HTTP/1.1 422 Unprocessable Entity

        {
          "status": 422,
          "message": "validation failed",
          "errors": {
            "email": "has invalid format"
          }
        }


# Group Packages
Something about packages.

## Packages Collection [/packages{?sort}]

### List all Packages [GET]

+ Parameters
    + sort: downloads (enum[string], optional)
        + Default: name
        + Members
            + name
            + downloads
            + inserted_at
            + updated_at

+ Request
    + Header

            Accept: application/json

+ Response 200 (application/json)
    + Body

            [{
              "name": "plug",
              "url": "https://hex.pm/api/packages/plug",
              "meta": {
                "links": {"GitHub": "https://github.com/elixir-lang/plug"},
                "licenses": ["Apache 2"],
                "description": "A specification and conveniences for composable modules in between web applications"
              },
              "downloads": {
                "all": 43,
                "week": 14,
                "day": 2
              },
              "releases": {
                "version": "0.4.1",
                "url": "https://hex.pm/api/packages/plug/releases/0.4.1",
                "inserted_at": "2014-04-23T18:58:54Z",
                "updated_at": "2015-04-26T15:26:23Z"
              },
              "inserted_at": "2015-03-24T20:31:35Z",
              "updated_at": "2015-04-02T04:55:41Z"
            }]

# Group Users
Something about users.

## Users Collection [/users]

### Create a User [POST]

A successful user creation will send a confirmation email to the given email address. In the email will be link to follow that will confirm the email and activate the account. The account will not be usable until activated.

A user can be recreated for the given `username` and `email` if it has not been activated yet.

+ Request (application/json)

The following parameters are available:

+ `username` Username of the user. Only allows any alphanumeric and the following characters: `_-.`
+ `password` User's password. Should be a printable UTF-8 string.
+ `email` User's email address. Should be a valid email address.

    + Header

            Accept: application/json

    + Body

          {
            "username": "ericmj",
            "password": "hunter42",
            "email": "ericmj@mail.com"
          }

+ Response 200 (application/json)
    + Body

            {
              "username": "ericmj",
              "email": "ericmj@mail.com"
              "inserted_at": "2015-04-05T01:21:49Z",
              "updated_at": "2015-04-05T01:21:49Z",
              "url": "https://hex.pm/api/users/ericmj"
            }
